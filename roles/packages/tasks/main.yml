---
- set_fact:
    packages: "{{ package|default({}) }}"

- block:
  - name: installs packages' gpg keys
    apt_key: url={{ item.value.keyserver }} id={{ item.value.id|default('') }}
    with_dict: "{{ packages.apt|default({}) }}"
    when: item.value.keyserver is defined

  - name: installs packages' repo urls
    apt_repository: repo='{{ item.value.repo }}' state=present
    with_dict: "{{ packages.apt|default({}) }}"
    when: item.value.repo is defined

  - name: updates apt cache
    apt:  update_cache=yes
    ignore_errors: True

  - name: preemptively runs dpkg configure to resolve conflicts
    shell: dpkg --configure -a

  - name: executes caveats
    shell: "{{ item.value.caveat }}"
    with_dict: "{{ packages.apt|default({}) }}"
    when: item.value.caveat|default(False)

  - name: adds packages
    shell: |
        package={{ item.key }}
        {% if item.value != "latest" and item.value.version|default(False) != "latest" %}
          package="$package={{ item.value.version|default(item.value) }}"
        {% endif %}

        apt install -y --force-yes $package
    with_dict: "{{ packages.apt|default({}) }}"

  # TODO: add other source types besides http
  - name: installs deb packages
    apt:
      deb: "{{ item.value.source }}"
    with_dict: "{{ packages.dpkg|default({}) }}"
  when: ansible_distribution in [ 'Ubuntu', 'Debian' ]

- name: installs gems
  shell: |
      gem list -i bundler >/dev/null || gem install --no-ri --no-rdoc bundler
      bash --login -c "
        cmd="gem install --no-ri --no-rdoc {{ item.key }}"
        check="gem list -i {{ item.key }}"
        {% if item.value.version != "latest" %}
          cmd="$cmd -v {{ item.value.version }}"
          check="$check -v {{ item.value.version }}"
        {% endif %}

        eval "$check" || eval "$cmd"
      "
  with_dict: "{{ packages.gem|default({}) }}"

- name: installs pip packages
  pip: name={{ item.key }} version={{ item.value.version }}
  with_dict: "{{ packages.pip|default({}) }}"

- name: installs pip3 packages
  shell: pip3 install -Iv {{ item.key }}=={{ item.value.version }}
  with_dict: "{{ packages.pip3|default({}) }}"
